// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Alhambra-II');
gettext('ICE40-Breakout-Board');
gettext('Icestick');
gettext('Icezum-Alhambra');
gettext('NandLand-Go-Board');
gettext('01-LEDs-buttons');
gettext('Constant bit 1');
gettext('NOT gate (Verilog implementation)');
gettext('Constant bit 0');
gettext('Generic: 4-bits generic constant (0-15)');
gettext('2-to-1 Multplexer (4-bit channels)');
gettext('2-to-1 Multplexer (1-bit channels)');
gettext('OR2: Two bits input OR gate');
gettext('Two bits input And gate');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('### Turn on LED7');
gettext('### Change LEDs 5 and 6 when pressing sw1 button');
gettext('### Turn off LED4');
gettext('### Display two constants on 4 LEDs');
gettext('Press for displaying the  \nother constant on the LEDs');
gettext('# Alhambra-II: LEDs and Buttons test\n\nTesting the LEDs and buttons');
gettext('Input');
gettext('Output');
gettext('Channel A');
gettext('Channel B');
gettext('02-jumping-LED');
gettext('Demultiplexor de 1 bit, de 3 a 8 (salida de bus)');
gettext('Button-tic: Configurable button that emits a tic when it is pressed');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input');
gettext('D Flip-flop (verilog implementation)');
gettext('Configurable button (pull-up on/off. Not on/off)');
gettext('FPGA internal pull-up configuration on the input port');
gettext('Remove the rebound on a mechanical switch');
gettext('1bit register (implemented in verilog)');
gettext('16-bits Syscounter with reset');
gettext('DFF-rst-x16: 16 D flip-flops in paralell with reset');
gettext('DFF-rst-x04: Three D flip-flops in paralell with reset');
gettext('DFF-rst-x01: D Flip flop with reset input. When rst=1, the DFF is 0');
gettext('Bus16-Split-quarter: Split the 16-bits bus into four buses of the same size');
gettext('Bus16-Join-quarter: Join the four same buses into an 16-bits Bus');
gettext('Inc1-16bit: Increment a 16-bits number by one');
gettext('AdderK-16bit: Adder of 16-bit operand and 16-bit constant');
gettext('Generic: 16-bits generic constant');
gettext('Adder-16bits: Adder of two operands of 16 bits');
gettext('Bus16-Split-half: Split the 16-bits bus into two buses of the same size');
gettext('Adder-8bits: Adder of two operands of 8 bits');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of the same size');
gettext('Adder-4bits: Adder of two operands of 4 bits');
gettext('Adder-1bit: Adder of two operands of 1 bit');
gettext('AdderC-1bit: Adder of two operands of 1 bit plus the carry in');
gettext('XOR gate: two bits input xor gate');
gettext('Bus8-Join-half: Join the two same halves into an 8-bits Bus');
gettext('AdderC-4bits: Adder of two operands of 4 bits and Carry in');
gettext('AdderC-8bits: Adder of two operands of 8 bits and Carry in');
gettext('Bus16-Join-half: Join the two same halves into an 16-bits Bus');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input');
gettext('Sync 1-bit input with the system clock domain');
gettext('Select positive or negative logic for the input (0=positive, 1=negative)');
gettext('1-bit generic constant (0/1)');
gettext('sysclk_divN_24bits: Generate a signal from the division of the system clock by N. (24-bits precision) (N = 2,3,4,..,0x1000000))');
gettext('Generic: 24-bits k-1 constant (Input values: 1,2,...,h1000000). It returns the value input by the user minus 1. Outputs: 0,1,2,...,FFFFFF');
gettext('Comp2-24bit: Comparator of two 24-bit numbers');
gettext('Comp2-8bit: Comparator of two 8-bit numbers');
gettext('Comp2-4bit: Comparator of two 4-bit numbers');
gettext('Comp2-1bit: Comparator of two 1-bit numbers');
gettext('Three bits input And gate');
gettext('Bus24-Split-one-third: Split the 24-bits bus into three buses of  the same size');
gettext('24-bits Syscounter with reset');
gettext('DFF-rst-x24: 24 D flip-flops in paralell with reset');
gettext('Bus24-Join-one-third: Join the three buses into an 24-bits Bus');
gettext('DFF-rst-x08: Eight D flip-flops in paralell with reset');
gettext('Inc1-24bit: Increment a 24-bits number by one');
gettext('AdderK-24bit: Adder of 24-bit operand and 24-bit constant');
gettext('Generic: 24-bits generic constant');
gettext('Adder-24bits: Adder of two operands of 24 bits');
gettext('Bus24-Split-16-8: Split the 24-bits bus into two buses of 16 and 8 wires');
gettext('Bus24-Join-8-16: Join the two buses into an 24-bits Bus');
gettext('Reg-x08: 8-bits register');
gettext('Reg-x04: 4-bits register');
gettext('Reg: 1-Bit register');
gettext('2-to-1 Multplexer (1-bit channels). Fippled version');
gettext('Bus8-Split-3-5: Split the 8-bits bus into two buses of 3 and 5 wires');
gettext('Registro de 8 bits');
gettext('Generic: 8-bits generic constant (0-255)');
gettext('2-to-1 Multplexer (8-bit channels)');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of 1 and 7 wires');
gettext('RS-FF-set. RS Flip-flop with priority set');
gettext('8bits constant value: 0');
gettext('## Display the position of the particle on the LEDs');
gettext('3-8 Demux');
gettext('Particle position');
gettext('Only one LED is ON  \nat a time');
gettext('Next position');
gettext('50Hz signal');
gettext('Jump state:\n* 0: Not jumping\n* 1: Jumping');
gettext('50Hz signal that is  \nonly active during the jump');
gettext('Boton pressed and  \nthe state is NOT jumping');
gettext('## Update signal generator');
gettext('## State Machine');
gettext('Pos == 0');
gettext('Vel < 0');
gettext('## Stop condition\n\nThe jump stos when the position is 0 and the velocity es negative ');
gettext('Start signal: The jump  \nstarts now!');
gettext('Particle Acceleration');
gettext('## Particle acceleration');
gettext('Initial acceleration');
gettext('Particle velocity');
gettext('Initial velocity');
gettext('Next velocity');
gettext('## Particle velocity');
gettext('## Particle position');
gettext('# Alhambra II: JUMPING LED\n\nWhen the button is pressed a particle moves up and down,   \nsimulating a jump (with gravity). The particle is shown  \non the LEDs');
gettext('System clock');
gettext('Button state signal');
gettext('Tic: button pressed');
gettext('Rising edge detector');
gettext('Pull up on/off');
gettext('Not on/off');
gettext('## Rising edge detector\n\nIt generates a 1-period pulse (tic) when a rising edge is detected on the  \ninput signal');
gettext('Input signal');
gettext('Current signal  \nstate');
gettext('Signal state in the previous  \nclock cycle');
gettext('If the current signal is 1 and its value in  \nthe previous clock cycle was 0, it means  \nthat a rising edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a rising edge  \nand its detection');
gettext('Parameter: Initial value');
gettext('Input data');
gettext('# D Flip-Flop  \n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Internal pull-up  \n* 0: OFF\n* 1: ON');
gettext('Synchronization stage');
gettext('Normalization stage\n\n* 0: Wire\n* 1: signal inverted');
gettext('Debouncing stage');
gettext('### Pull-up parameter:\n\n0: No pull-up  \n1: Pull-up activated');
gettext('Only an FPGA pin can  \nbe connected here!!!');
gettext('The pull-up is connected  \nby default');
gettext('Edge detector');
gettext('Whenever there is a change in  \nthe input, the counter is started');
gettext('If the counter reaches it maximum  \nvalue, the input is considered stable  \nand it is captured');
gettext('### Time calculation\n\nFor CLK=12MHZ, a 16-bit counter reaches its  \nmaximum every 2 ** 16 * 1/F = 5.5ms aprox  \nIF more time is needed for debouncing,  \nuse a counter with more bits (17, 18...)');
gettext('## Debouncer  \n\nA value is considered stable when  \nthere is no changes during 5.5ms  \naprox. When a value is stable it is  \ncaptured on the output flip-flop');
gettext('Stable output');
gettext('Counter');
gettext('Initial value');
gettext('Reset input: Active high  \nWhen rst = 1, the DFF is reset to 0');
gettext('Data input');
gettext('Initial default  \nvalue: 0');
gettext('## Edges detector\n\nIt generates a 1-period pulse (tic) when an edge (Rising or falling) is detected on the  \ninput signal');
gettext('The output is 1 if the current value is 1 and the  \nprevious 0, or if the current value is 0 and the  \nprevious 1\n');
gettext('In any other case the output is 0');
gettext('When k=0, it works like a wire  \n(The output is equal to the input)  \nWhen k=1, it act as a not gate\n(The output is the inverse of the input)');
gettext('### Truth table for XOR\n\n| k | input | output | function |\n|---|-------|--------|----------|\n| 0 | 0     |  0     | wire     |\n| 0 | 1     |  1     | wire     |\n| 1 | 0     |  1     | Not      |\n| 1 | 1     |  0     | Not      |');
gettext('Output: 0,1,2,...,hffffff');
gettext('Inputs: 1,2,...,h1000000');
gettext('A');
gettext('B');
gettext('Mux 2-1');
gettext('D Flip-flip\n(System)');
gettext('Priority for the set');
gettext('03-riscv-stop-watch');
gettext('Generic component with clk input');
gettext('RV32I');
gettext('32bits constant value: 0');
gettext('Generic: 32-bits generic constant');
gettext('Smem 1kx32: Synchronous memory: 1024 words of 32 bits');
gettext('Bus32-Split-22-10: Split the 32-bits bus into two buses of 22 and 10 wires');
gettext('SR1-32bits: Shift  a 32-bit value one bit right. MSB is filled with the input  in');
gettext('Bus32-Split-31-1: Split the 32-bits bus into two buses of 31 and 1 wires');
gettext('Bus32-Join-1-31: Join the two buses into an 32-bits Bus');
gettext('Componente genérico');
gettext('Bus3-Split-all: Split the 3-bits bus into three wires');
gettext('Bus32-Split-17-15: Split the 32-bits bus into two buses of 17 and 15 wires');
gettext('Bus15-Split-7-8: Split the 15-bits bus into two buses of 7 and 8 bits');
gettext('Comp2-5bit: Comparator of two 5-bit numbers');
gettext('Bus5-Split-1-4: Split the 5-bits bus into two buses of 1 and 4 bits');
gettext('5bits constant value: 0');
gettext('Generic: 5-bits generic constant (0-31)');
gettext('Bus32-Split-29-3: Split the 29-bits bus into two buses of 29 and 3 wires');
gettext('OR-BUS4: OR gate with 4-bits bus input');
gettext('OR4: Four bits input OR gate');
gettext('Bus32-Split-quarter: Split the 32-bits bus into four buses of 8 wires');
gettext('2-to-1 Multplexer (32-bit channels)');
gettext('Bus32-Join-quarter: Join the four buses into an 32-bits Bus');
gettext('start-5-bit: 32 cycles width pulse');
gettext('5-bits Syscounter with reset');
gettext('DFF-rst-x05: Five D flip-flops in paralell with reset');
gettext('Bus5-Join-1-4: Join the two buses of 1 and 4 bits into a 5-bits Bus');
gettext('Inc1-5bit: Increment a 5-bits number by one');
gettext('AdderK-5bit: Adder of 5-bit operand and 5-bit constant');
gettext('Adder-5bits: Adder of two operands of 5 bits');
gettext('AND-Busen-5: Enable a 5-bits bus. When the enable signal is 0, the output is 0');
gettext('Bus5-Split-all: Split the 5-bits bus into its wires');
gettext('Bus5-Join-all: Join all the wires into a 5-bits Bus');
gettext('UINT8-2bits:  Extend a 2-bits unsigned integer to 8-bits ');
gettext('Bus8-Join-6-2: Join the two buses into an 8-bits Bus');
gettext('6bits constant value: 0');
gettext('Generic: 6-bits generic constant (0-63)');
gettext('Configurable buttons (pull-up on/off. Not on/off)');
gettext('Separador de bus de 2-bits en dos cables');
gettext('Agregador de 2 cables en un bus de 2-bits');
gettext('Valor genérico constante, de 1 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Puerta XOR');
gettext('Contador módulo M, ascendente, de 16 bits, con reset ');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('## LEDs');
gettext('## Alhambra-II: RISC-V stopwatch on LEDs');
gettext('RISC-V computer');
gettext('## Buttons\n* SW1: Stop/Start  \n* SW2: Reset');
gettext('Extend the 2-bit number to  \n8 bits (adding leading 0s)');
gettext('Mapa de Memoria\n\n| Dir     | Recurso |\n|-------- |---------|\n| 0x7F00  | Puerto de salida  |\n| 0x7F04  | Puerto de entrada |\n| 0x0FFF  | Fin de RAM        |\n| 0x0000  | Inicio de la RAM  |');
gettext('# Generación del Pulso de Reset\n');
gettext('El pulso de reset es de lógica negativa\n\n```\n(Reset)             (Estado normal)  \n            ________________________________  \n32 ciclos   |  \n____________|  \n```');
gettext('# Procesador (RISC-V): RV32I\n');
gettext('Reset');
gettext('Instrucciones y datos');
gettext('No hay esperas: la memoria y los  \npuertos funcionan en 1 ciclo');
gettext('Dirección de memoria');
gettext('Datos a escribir');
gettext('Control de escritura  ');
gettext('# Memoria de instrucciones\n');
gettext('Instrucción');
gettext('# Puerto de SALIDA\n');
gettext('# Lógica de selección\n');
gettext('Acceso a ROM');
gettext('Puerto de salida');
gettext('Puerto de entrada');
gettext('# Bus de entrada al procesador\n');
gettext('# Puerto de entrada\n');
gettext('**FEMTORV**');
gettext('Dirección de byte');
gettext('Descartar los 2 bits de menor  \npeso de la direccion');
gettext('Direccion de palabra');
gettext('Es memoria ROM:  \nSólo leemos');
gettext('No usados');
gettext('15 bits de menor peso de  \nla direccion');
gettext('Bits a14-a10  \na 0');
gettext('Bits a14-a10  \na 1');
gettext('Bit a2:\n  * a2=1: Botones\n  * a2=0: Leds');
gettext('## Logica Seleccion de bloque\n\nAcceso a Memoria ROM o  \nacceso a puertos IO');
gettext('## Logica Seleccion de Puerto IO\n\nAcceso a Puerto entrada (botones) o  \nacceso a puerto salida (LEDs)\n');
gettext('Current cycle');
gettext('Enable input');
gettext('Bus input');
gettext('Bus output');
gettext('**Parámetro**: Módulo del contador');
gettext('01-LEDs-buttons');
gettext('02-jumping-LED');
gettext('03-riscv-stop-watch');
gettext('01-LEDs');
gettext('Counter-x01: 1-bit counter');
gettext('### Turn on LEDs 7, 6 and 5');
gettext('### Two state signal Displayed on the LEDs 3,2,1 and 0');
gettext('0.5Hz Signal');
gettext('# ICE40-Breakout Board: LEDs test\n\nTesting the LEDs');
gettext('1Hz Signal');
gettext('02-jumping-LED');
gettext('start: Start signal: It goes from 1 to 0 when the system clock starts. 1 cycle pulse witch');
gettext('Temporizador en segundos. La señal p está activa durante el tiempo indicado. Por tic se emite un tic al finalizar');
gettext('# ICE40-Breakout Board:  JUMPING LED\n\nEvery 2 seconds a particle is moved up and down,   \nsimulating a jump (with gravity). The particle is shown  \non the LEDs');
gettext('Initial value: 1');
gettext('Initial value: 0');
gettext('Falling edge');
gettext('**Arranque del**  \n**temporizador**');
gettext('**Salida de pulso**');
gettext('**Salida de tic**');
gettext('**Parametro del timer**  \nSegundos a esperar');
gettext('03-riscv-stop-watch');
gettext('SR1-32bits: Shift  a 32-bit value one bit right. MSB is filled with the input \');
gettext('## ICE40-Breakout Board: RISC-V Counter');
gettext('01-LEDs');
gettext('02-jumping-LED');
gettext('03-riscv-stop-watch');
gettext('01-LEDs');
gettext('### Turn on LED 5 (Green)');
gettext('### Two state signal Displayed on the 4 LEDs (Red leds)');
gettext('# Icestick: LEDs test\n\nTesting the LEDs');
gettext('02-jumping-LED');
gettext('# Icestick: JUMPING LED\n\nEvery 2 seconds a particle is moved up and down,   \nsimulating a jump (with gravity). The particle is shown  \non the LEDs');
gettext('03-riscv-stop-watch');
gettext('## Icestick: RISC-V stopwatch on LEDs');
gettext('## Buttons\n\nNo buttons on the Icestick  \nboard');
gettext('01-LEDs');
gettext('01-LEDs-buttons');
gettext('02-jumping-LED');
gettext('03-riscv-stop-watch');
gettext('02-jumping-LED');
gettext('01-LEDs-buttons');
gettext('# Icezum Alhambra: LEDs and Buttons test\n\nTesting the LEDs and buttons');
gettext('02-jumping-LED');
gettext('# Icezum Alhambra: JUMPING LED\n\nWhen the button is pressed a particle moves up and down,   \nsimulating a jump (with gravity). The particle is shown  \non the LEDs');
gettext('03-riscv-stop-watch');
gettext('## Icezum-Alhambra: RISC-V stopwatch on LEDs');
gettext('01-LEDs-buttons');
gettext('02-jumping-LED');
gettext('03-riscv-stop-watch');
gettext('01-LEDs-buttons');
gettext('not-x2: 2-bits not gate');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('Bus2-Join-all: Joint two wires into a 2-bits Bus');
gettext('### Testing buttons SW1 and SW2 on LEDs 1 and 2 (Positive logics)');
gettext('# Nandland Go Board: LEDs and Buttons test\n\nThe state of the buttons is shown on the LED');
gettext('### Testing buttons SW3 and SW4 on LEDs 3 and 4 (Negative logic)');
gettext('02-jumping-LED');
gettext('# Nandland Go Board: JUMPING LED\n\nWhen the button is pressed a particle moves right and left,   \nsimulating a jump (with gravity). The particle is shown  \non the LEDs');
gettext('01-LEDs-buttons');
gettext('02-jumping-LED');
gettext('03-riscv-stop-watch');
